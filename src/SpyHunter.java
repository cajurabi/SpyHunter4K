import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.Random;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;

import javax.swing.JFrame;
import javax.swing.JPanel;

public final class SpyHunter extends JFrame
{
	final private boolean[] setDefaultCloseOperation;

	private SpyHunter()
	{
		super("SpyHunter4K");
//		super();
		setDefaultCloseOperation = new boolean[7];
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setResizable(false);
		enableEvents(8L);
		pack();
		show();
	}

	/**
	 * main
	 */
	public static void main(String[] args) throws Exception
	{
		// First 4 vars have "short" opcodes for reference
		int i, j, x, y, s, w, h, yDiff, xDiff, maxYVel=0;

		byte[] b;

		final int TARGET_FPS = 30;
		final int FRAME_SLEEP = 1000 / TARGET_FPS;

		final int SCREEN_WIDTH     = 480;
		final int SCREEN_HEIGHT    = 480;

		final int GRASS_RGB     = 0x009200;
		final int GRASS_X_LEFT  = 0;
		final int GRASS_WIDTH   = 140; 
		final int GRASS_X_RIGHT = SCREEN_WIDTH - GRASS_WIDTH;

		final int GRASS_RECT_WIDTH = SCREEN_WIDTH;

		final int SHOULDER_RGB        = 0xB66D25;
		final int SHOULDER_X_LEFT     = GRASS_X_LEFT + GRASS_WIDTH;
		final int SHOULDER_WIDTH      = 16;
		final int SHOULDER_X_RIGHT    = GRASS_X_RIGHT - SHOULDER_WIDTH;
		final int SHOULDER_RECT_WIDTH = SHOULDER_X_RIGHT - SHOULDER_X_LEFT + SHOULDER_WIDTH;

		final int ROAD_RGB    = 0x252525;
		final int ROAD_X      = SHOULDER_X_LEFT + SHOULDER_WIDTH;
		final int ROAD_WIDTH  = SHOULDER_X_RIGHT - ROAD_X;

		final int SL_INDEX_HERO         = 0;
		final int SL_INDEX_BUG          = 1;
		final int SL_INDEX_BIKE         = 2;
		final int SL_INDEX_VETTE        = 3;
		final int SL_INDEX_ROAD_LORD    = 4;
		final int SL_INDEX_SWITCH_BLADE = 5;
		final int SL_INDEX_TREE         = 6;
		final int SL_INDEX_BULLET       = 7;
		final int SL_INDEX_ICON         = 8;
		final int SL_INDEX_BLADE1       = 9;
		final int SL_INDEX_BLADE2       = 10;
		final int SL_NUM_SPRITES        = 11;
		
		final int SL_NPC_INDEX = 1;
		final int SL_NUM_NPC   = 5;

		final int TREE_WIDTH  = 64;
		final int TREE_HEIGHT = 66;

		final int HERO_WIDTH  = 24;
		final int HERO_HEIGHT = 41;

		final int AUDIO_LENGTH = 3840;

		// These need to add to SCREEN_HEIGHT To make a value that is a multiple of TREE_STEP
		final int NPC_Y_CLIP_TOP    = 110;
		final int NPC_Y_CLIP_BOTTOM = 110;

		final int TREE_STEP = 100;
		final int NUM_TREES = (SCREEN_HEIGHT + NPC_Y_CLIP_TOP + NPC_Y_CLIP_BOTTOM) / TREE_STEP;//(SCREEN_HEIGHT/ TREE_HEIGHT) + 1;

		final int HERO_INDEX = 0;

		final int HERO_LOW_VEL = 30;
		final int HERO_HI_VEL  = 60;
		final int HERO_LOW_Y   = 302;
		final int HERO_HI_Y    = 204;
		final int HERO_MIN_Y   = 398;

		final int NPC_INDEX = HERO_INDEX + 1;
		final int MIN_NPC = 2;//2;
		final int MAX_NPC = 9;//9;
		final int NUM_NPC = MAX_NPC;

		final int NPC_MIN_Y_VEL = 25;
		final int NPC_MAX_Y_VEL = 33;
		final int NPC_MAX_X_VEL = 5;

		final int BULLET_INDEX = NPC_INDEX + NUM_NPC;
		final int BULLET_VEL   = 19;
		final int BULLET_TTL   = 13;
		final int NUM_BULLETS  = BULLET_TTL+1;

		final int TREE_LEFT_INDEX  = BULLET_INDEX + NUM_BULLETS;
		final int TREE_RIGHT_INDEX = TREE_LEFT_INDEX + NUM_TREES;

		final int ICON_INDEX = TREE_RIGHT_INDEX + NUM_TREES;
		final int NUM_ICONS  = 3;
		final int MAX_LIVES  = NUM_ICONS;

		final int BLADES_INDEX = ICON_INDEX + NUM_ICONS;
		final int NUM_BLADES = NUM_NPC * 2;

		final int NUM_GAME_SPRITES = NUM_TREES + NUM_TREES + 1 + NUM_NPC + NUM_BULLETS + NUM_ICONS + NUM_BLADES;

		final int KEY_INDEX_LEFT   = 1;
		final int KEY_INDEX_RIGHT  = 2;
		final int KEY_INDEX_UP     = 3;
		final int KEY_INDEX_CTRL   = 4;
		final int KEY_INDEX_ENTER  = 5;
		final int KEY_INDEX_ESCAPE = 6;

		final int BIKE_LOW_VEL = HERO_LOW_VEL - 3;
		final int BIKE_HI_VEL  = HERO_LOW_VEL;

		final int VETTE_HI_VEL = HERO_LOW_VEL - 8;

		final int BUG_HI_VEL   = HERO_LOW_VEL - 12;

		final int COLLISION_FLASH_FRAMES = 30;
		
		final int STATUS_SCORE_X = SHOULDER_X_LEFT + SHOULDER_WIDTH;
		final int STATUS_SCORE_Y = 20;
		final int STATUS_LIVES_X = SHOULDER_X_RIGHT - 50;
		final int STATUS_LIVES_Y = 10;
		final int STATUS_COOL_DOWN_X = SHOULDER_X_RIGHT - 25;
		final int STATUS_COOL_DOWN_Y = STATUS_SCORE_Y;

		// Sprite data
		final String spriteData =
//		 HalfMontage6-16color.raw
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		"\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\112\112\112\112\117\117\100\100\112\112\100\100\117\117\100\100\117\117\100\100\100\100\112\112\112\112\106\106\100\100\112\112\112\112\112\112\112\112\106\106\106\106\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\112\112\112\112\117\117\100\100\112\112\100\100\117\117\100\100\117\117\100\100\100\100\112\112\112\112\106\106\100\100\112\112\112\112\112\112\112\112\106\106\106\106\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\112\112\117\117\103\103\100\100\117\117\112\112\100\100\100\100\100\100\100\100\112\112\112\112\112\112\106\106\100\100\100\100\100\100\112\112\112\112\100\100\106\106\106\106\100\100\100\100\100\100\116\116\100\100\100\100\100\100\100\100\100\100\100\100\100\100\112\112\117\117\103\103\100\100\117\117\112\112\100\100\100\100\100\100\100\100\112\112\112\112\112\112\106\106\100\100\100\100\100\100\112\112\112\112\100" +
		
		
		
		
		
		"\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100";
//		 5404 bytes total

		final int
		score              = 1,
		noPointsFramesLeft = 2,
		livesLeft          = 3,
	    livesGiven         = 4,
	    coolDown           = 5,
	    grace              = 6,
	    hiscore            = 7,

	    ivarCount          = 7 + 1;

	final int
		addBullet     = 0,
		showGameOver  = 1,
		demoMode      = 2,
		enterDown     = 3,
		rumbleEnabled = 4,
		rumbleToggle  = 5,
		c             = 6,
		hit           = 7,
	    coolDownCarry = 8,
		bvarCount     = 9;

	final int[]     ivars = new int    [ivarCount];
	final boolean[] bvars = new boolean[bvarCount];

		//
		// Init Screen
		//
		final SpyHunter a = new SpyHunter();
		final JPanel p = new JPanel();
		a.getContentPane().add(p);
		a.setSize(SCREEN_WIDTH + 20, SCREEN_HEIGHT + 30);
		a.validate();

		//
		// Read sprites
		//

		final int[] pal = new int[16];
		final int[] spriteI   = new int[NUM_GAME_SPRITES];
		b = spriteData.getBytes();

		for (i = 0, j = 0; j < 16; j++)
		{
			pal[j] = ( ( ( ( (b[i++] << 8) | b[i++]) << 8) | b[i++])) << 1;
		}

		j = 0;
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // hero
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // bug
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // bike
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // vette 
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // road lord
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // switch blade
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // tree
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // bullet
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // icon
		spriteI[j++] = i; i += b[i++] * b[i] + 2; // blade1
		spriteI[j++] = i;// i += b[i++] * b[i] + 2; // blade2

		//
		// Game Setup
		//

		final Random r = new Random();

		final BufferedImage buffer  = new BufferedImage(SCREEN_WIDTH, SCREEN_HEIGHT, BufferedImage.TYPE_INT_RGB);
		
		final int[] spriteX      = new int[NUM_GAME_SPRITES];
		final int[] spriteY      = new int[NUM_GAME_SPRITES];
		final int[] spriteXVel   = new int[NUM_GAME_SPRITES];
		final int[] spriteYVel   = new int[NUM_GAME_SPRITES];
		final int[] spriteImg    = new int[NUM_GAME_SPRITES];
		final int[] spriteIState1 = new int[NUM_GAME_SPRITES];
		final boolean[] spriteBState1     = new boolean[NUM_GAME_SPRITES];
		final boolean[] spriteInitDone    = new boolean[NUM_GAME_SPRITES];
		final boolean[] spriteEnabled     = new boolean[NUM_GAME_SPRITES];
		final boolean[] spriteNoCollide   = new boolean[NUM_GAME_SPRITES];
		final boolean[] spriteStartCrash  = new boolean[NUM_GAME_SPRITES];
		final boolean[] spriteFlashToggle = new boolean[NUM_GAME_SPRITES];


		ivars[hiscore] = 12345;
		bvars[demoMode] = true;

		while (true)
		{
			final long frameStart = System.currentTimeMillis();
			final Graphics      gPanel  = p.getGraphics();
			final Graphics      gBuffer = buffer.getGraphics();
	
			// Escape = exit
			if (a.setDefaultCloseOperation[KEY_INDEX_ESCAPE])
			{
				System.exit(0);
			}

			// Proccess enter here since it has multiple functions
			if (a.setDefaultCloseOperation[KEY_INDEX_ENTER])
			{
				bvars[enterDown] = true;
			}
			else
			{
				if (bvars[enterDown])
				{
					if (bvars[demoMode])
					{

						spriteInitDone[HERO_INDEX] = false;

						ivars[score]              = 0;
						ivars[noPointsFramesLeft] = 0;
						ivars[livesLeft]          = 0;
						ivars[livesGiven]         = 0;

						ivars[coolDown] = 999;

						bvars[showGameOver] = true;
						bvars[demoMode]     = false;
					}
					else
					{
						maxYVel = (maxYVel == HERO_LOW_VEL) ? HERO_HI_VEL : HERO_LOW_VEL;
					}
				}

				bvars[enterDown] = false;
			}

			// Cycle through and update each sprite
			for (i = 0; i < NUM_GAME_SPRITES; i++)
			{

				// HERO
//				if (i == HERO_INDEX)
				if (i < HERO_INDEX + 1)
				{
					if (!bvars[demoMode])
					{
						if (spriteInitDone[i])
						{
							// If we're in a crash sequence,
							// then ignore key input
							if (!spriteNoCollide[i])
							{
								spriteX[i] += spriteXVel[i];

								// Dampen velocity
								if (spriteXVel[i] > 0)
								{
									spriteXVel[i]--;
								}

								if (spriteXVel[i] < 0)
								{
									spriteXVel[i]++;
								}

								// Right Arrow Key
								if (a.setDefaultCloseOperation[KEY_INDEX_RIGHT])
								{
									spriteXVel[i] += 2;
									
									if (spriteXVel[i] > (spriteYVel[i]+1)>>1)
									{
										spriteXVel[i] = (spriteYVel[i]+1)>>1;
									}
								}

								// Left Arrow Key
								if (a.setDefaultCloseOperation[KEY_INDEX_LEFT])
								{
									spriteXVel[i] -= 2;

									if (spriteXVel[i] < -((spriteYVel[i]+1)>>1))
									{
										spriteXVel[i] = -((spriteYVel[i]+1)>>1);
									}
								}


								// Up Arrow Key
								if (a.setDefaultCloseOperation[KEY_INDEX_UP] && (spriteYVel[i] <= maxYVel))
								{
									spriteYVel[i] += 2;

									if (spriteYVel[i] >= maxYVel)
									{
										spriteYVel[i] = maxYVel+1;
									}
								}

								if (spriteYVel[i] > 0)
								{
									spriteYVel[i]--;
								}
								else
								{
									maxYVel = HERO_LOW_VEL;
								}

								// CTRL Key (Fire)
								bvars[addBullet] = a.setDefaultCloseOperation[KEY_INDEX_CTRL];

								if	(
										(bvars[rumbleEnabled])
									&&	(bvars[rumbleToggle])
									)
								{
									spriteX[i] -= 3;
								}

								bvars[rumbleEnabled] = 
									((spriteX[i] > SHOULDER_X_RIGHT - HERO_WIDTH) || (spriteX[i] < ROAD_X));

									bvars[rumbleToggle] = !bvars[rumbleToggle];

								if	(
										(bvars[rumbleEnabled])
									&&	(bvars[rumbleToggle])
									)
								{
									spriteX[i] += 3;
								}
			
								spriteY[i] = HERO_MIN_Y - ( (spriteYVel[i] * (HERO_MIN_Y - HERO_HI_Y)) / HERO_HI_VEL);
							} // spriteNoCollide == false
						}
						// initDone == false
						else
						{
							spriteX[i]    = SHOULDER_X_RIGHT-3; 
							spriteY[i]    = HERO_MIN_Y;
							spriteImg[i]  = SL_INDEX_HERO;
							spriteYVel[i] = 0;

							spriteEnabled[i]   = //true;
							spriteInitDone[i]  = true;

							spriteNoCollide[i]   = false;

							bvars[rumbleEnabled] = //false;
							bvars[rumbleToggle]  = false;

							maxYVel = HERO_LOW_VEL;

							ivars[grace] = 50;
						}
					}
				} // hero update
				// NPC
//				if (i >= NPC_INDEX && i < NPC_INDEX + NUM_NPC)
				else
				if (i < NPC_INDEX + NUM_NPC)
				{
					j = BLADES_INDEX + ((i - NPC_INDEX) << 1);
					if (ivars[grace] >= 0 || i >= NPC_INDEX + MIN_NPC + ivars[livesGiven])
					{
						spriteInitDone[i] = false;
						spriteEnabled[i]  = false;
					}
					else
					if (spriteInitDone[i])
					{
						// Apply Velocity
						spriteY[i] += spriteYVel[HERO_INDEX] - spriteYVel[i];
						spriteX[i] += spriteXVel[i];

						// Dampen velocity
						if (spriteXVel[i] > 0)
						{
							spriteXVel[i]--;
						}
						if (spriteXVel[i] < 0)
						{
							spriteXVel[i]++;
						}

						// If its off the game (virtual) screen
						if (spriteY[i] > SCREEN_HEIGHT + NPC_Y_CLIP_BOTTOM || spriteY[i] < -NPC_Y_CLIP_TOP)
						{
							spriteInitDone[i] = false;
							spriteEnabled[i]  = false;

							spriteBState1[j]   = true;
							spriteBState1[j+1] = true;
						}
						else
						// If its not in crash mode
						// Then we can update logic
						if (spriteNoCollide[i] == false)
						{
							// Mobsters don't update in demo mode
							if (!bvars[demoMode])
							{
								// Mobster
								if (spriteImg[i] == SL_INDEX_SWITCH_BLADE || spriteImg[i] == SL_INDEX_ROAD_LORD)
								{
									yDiff = spriteY[HERO_INDEX] - spriteY[i];

									if	(
											(yDiff >= 0 && yDiff <  b[spriteI[spriteImg[i]] + 1])
										||	(yDiff <  0 && yDiff > -b[spriteI[spriteImg[i]] + 1])
										)
									{
										spriteXVel[i] += (spriteX[HERO_INDEX] > spriteX[i]) ? 2 : -2;
									}

									if (spriteImg[i] == SL_INDEX_SWITCH_BLADE)
									{
										spriteBState1[i] = 
											(
												(yDiff >= 0 && yDiff <  75)
											||	(yDiff <  0 && yDiff > -75)
											);									
										}

									if (spriteYVel[HERO_INDEX] < HERO_LOW_VEL)
									{
										spriteYVel[i]++;
									}
									else
									// I'm above the hero
									if (yDiff > 0)
									{
										spriteYVel[i]--;
									}
									else
									{
										spriteYVel[i]++;
									}
								}
							}

							// Bike
							if (spriteImg[i] == SL_INDEX_BIKE)
							{
								spriteIState1[i]--;

								if (spriteIState1[i] <= 0)
								{
									spriteIState1[i]  = r.nextInt(30);
									spriteBState1[i] = !spriteBState1[i];

									spriteYVel[i] = BIKE_HI_VEL;
									if (spriteBState1[i])
									{
										spriteYVel[i] = BIKE_LOW_VEL;
									}
								}
							}

							// If we're getting too close to the edge
							if (spriteX[i] < (ROAD_X + 16) && spriteXVel[i] <= 0)
							{
								spriteXVel[i] += 2;
							}
							if (spriteX[i] > (ROAD_X + ROAD_WIDTH - 16 - (b[spriteI[spriteImg[i]]    ] << 1)) && spriteXVel[i] >= 0)
							{
								spriteXVel[i] -= 2;
							}

							// Adjust velocities to max
							if (spriteYVel[i] > NPC_MAX_Y_VEL)
							{
								spriteYVel[i] = NPC_MAX_Y_VEL;
							}
							if (spriteYVel[i] < NPC_MIN_Y_VEL)
							{
								spriteYVel[i] = NPC_MIN_Y_VEL;
							}
							if (spriteXVel[i] > NPC_MAX_X_VEL)
							{
								spriteXVel[i] = NPC_MAX_X_VEL;
							}
							if (spriteXVel[i] < -NPC_MAX_X_VEL)
							{
								spriteXVel[i] = -NPC_MAX_X_VEL;
							}
						}
					}
					// Create a new NPC
					else
					{
						spriteImg[i] = r.nextInt(SL_NUM_NPC) + SL_NPC_INDEX;
//						spriteImg[i] = SL_INDEX_ROAD_LORD;
						spriteX[i]   = r.nextInt(ROAD_WIDTH - (b[spriteI[spriteImg[i]]    ] << 1)) + ROAD_X;
						spriteY[i]   = r.nextInt(NPC_Y_CLIP_TOP - b[spriteI[spriteImg[i]] + 1]);
						while ((spriteYVel[i] = r.nextInt(NPC_MAX_Y_VEL - NPC_MIN_Y_VEL + 1) + NPC_MIN_Y_VEL) == HERO_LOW_VEL);

						spriteEnabled[i]  = //true;
						spriteInitDone[i] = true;

						spriteNoCollide[i]   = false;

						spriteBState1[j]     = //false;
						spriteBState1[j + 1] = false;

						// Bike?
						if (spriteImg[i] == SL_INDEX_BIKE)
						{
							spriteYVel[i] = BIKE_LOW_VEL;
						}
	
						// Vette?
						if (spriteImg[i] == SL_INDEX_VETTE)
						{
							spriteYVel[i] = VETTE_HI_VEL;
						}

						// Bug
						if (spriteImg[i] == SL_INDEX_BUG)
						{
							spriteYVel[i] = BUG_HI_VEL;
						}

						// Switch Blade
						if (spriteImg[i] == SL_INDEX_SWITCH_BLADE)
						{
							// Enable blades
							spriteBState1[j  ] = true;
							spriteBState1[j+1] = true;
						}

						spriteY[i] +=
							(spriteYVel[i] > spriteYVel[HERO_INDEX])
						?	SCREEN_HEIGHT
						:	-NPC_Y_CLIP_TOP;
					}
				} // npc update
				// BULLET
//				if (i >= BULLET_INDEX && i < BULLET_INDEX + NUM_BULLETS)
				else
				if (i < BULLET_INDEX + NUM_BULLETS)
				{
					if (spriteEnabled[i])
					{
						spriteY[i] -= BULLET_VEL;
						spriteIState1[i]--;

						if (spriteY[i] < 0 || spriteIState1[i] <= 0)
						{
							spriteEnabled[i] = false;
						}
					}
					else
					if (bvars[addBullet])
					{
						spriteImg    [i] = SL_INDEX_BULLET;
						spriteX      [i] = spriteX[HERO_INDEX] + 8;
						spriteY      [i] = spriteY[HERO_INDEX] - 7;
						spriteIState1[i] = BULLET_TTL;
						spriteYVel   [i] = BULLET_VEL;
						spriteEnabled[i] = true;

						bvars[addBullet] = false;
					}
				} // bullet update
				// TREE
//				if (i >= TREE_LEFT_INDEX && i < (TREE_RIGHT_INDEX + NUM_TREES))
				else
				if (i < (TREE_RIGHT_INDEX + NUM_TREES))
				{
					if (spriteInitDone[i])
					{
						spriteY[i] += spriteYVel[HERO_INDEX] >> 1;
	
						if (spriteY[i] > SCREEN_HEIGHT + NPC_Y_CLIP_BOTTOM)
						{
							spriteY[i] -= NPC_Y_CLIP_TOP + SCREEN_HEIGHT + NPC_Y_CLIP_BOTTOM;
						}
					}
					else
					{
						spriteX[i] = r.nextInt(GRASS_WIDTH - TREE_WIDTH) + (i >= TREE_RIGHT_INDEX ? GRASS_X_RIGHT : 0);
						spriteY[i]  = (( i - TREE_LEFT_INDEX - (i >= TREE_RIGHT_INDEX ? NUM_TREES : 0)) * TREE_STEP) - NPC_Y_CLIP_TOP;
						spriteImg[i] = SL_INDEX_TREE;
						spriteNoCollide[i] = true;
						spriteEnabled[i]   = true;
						spriteInitDone[i]  = true;
					}
				} // tree update
				// ICONS
//				if (i >= ICON_INDEX && i < ICON_INDEX + NUM_ICONS)
				else
				if (i < ICON_INDEX + NUM_ICONS)
				{
					spriteEnabled[i] = false;
					if (!bvars[demoMode] && ivars[coolDown] < 0 && (i - ICON_INDEX < ivars[livesLeft]))
					{
						spriteEnabled[i]   = true;
						spriteNoCollide[i] = true;
						spriteX[i] = ((i - ICON_INDEX) << 4) + STATUS_LIVES_X;
						spriteY[i] = STATUS_LIVES_Y;
						spriteImg[i] = SL_INDEX_ICON;
					}
				} // icon update
				// BLADES
				// BSTATE1 = BLADES_ON
				// BSTATE2 = BLADE_TOGGLE
//				if (i >= BLADES_INDEX && i < BLADES_INDEX + NUM_BLADES)
				else //if (i < BLADES_INDEX + NUM_BLADES)
				{
					spriteInitDone[i] = !spriteInitDone[i];  // Used for Blade Toggle
					
					j = NPC_INDEX + (((i - BLADES_INDEX) & ~1) >> 1);

					spriteEnabled[i] = false;
					if	(
							(ivars[grace] < 0)
						&&	(spriteEnabled[j])
						&&	(spriteBState1[i])
						&&	(spriteBState1[j])
						)
					{
						spriteEnabled[i] = true;
						spriteNoCollide[i] = spriteNoCollide[j];

						spriteImg[i] = spriteInitDone[i] ? SL_INDEX_BLADE1 : SL_INDEX_BLADE2;

						spriteX[i] = spriteX[j] - 9;

						spriteY[i] = spriteY[j] + ((((i - BLADES_INDEX) & 1) == 0) ? 6 : 24);
					}
				} // blade update


				//
				// Check for course runoff +
				// Crash Sequence Update
				//
			
				// If we're dealing with Hero or an NPC
				if (spriteInitDone[i] && (i == HERO_INDEX || (i >= NPC_INDEX && i < NPC_INDEX + NUM_NPC)))
				{
					// If we're waiting to start crash mode
					if (spriteStartCrash[i])
					{
						spriteStartCrash[i] = false;

						spriteNoCollide[i] = true;
						spriteIState1[i] = COLLISION_FLASH_FRAMES;
						spriteXVel[i] = 0;

						// If its Hero
						if (spriteImg[i] == SL_INDEX_HERO)
						{
							// Stop forward motion
							spriteYVel[i] = 0;
						}
						else
						if (!bvars[demoMode])
						{
							spriteBState1[i] = false;

							// If its a civilian
							if (spriteImg[i] == SL_INDEX_SWITCH_BLADE)
							{
								if (ivars[noPointsFramesLeft] == 0)
								{
									ivars[score] += 250;
								}
							}
							else
							if (spriteImg[i] == SL_INDEX_ROAD_LORD)
							{
								if (ivars[noPointsFramesLeft] == 0)
								{
									ivars[score] += 500;
								}
							}
							else
							{
								// No points for you!
								ivars[noPointsFramesLeft] = COLLISION_FLASH_FRAMES * 3;
							}
						}
					}
					else
					// If we're already in crash mode
					if (spriteNoCollide[i])
					{
						// Adjust YVel to hero's so it stays on screen
						spriteYVel[i] = spriteYVel[HERO_INDEX];

						spriteIState1[i]--;

						// If crash sequence is done
						if (spriteIState1[i] < 0)
						{
							spriteInitDone[i] = false;
							spriteEnabled[i]  = false;

							// Hero?
							if (i == HERO_INDEX && ivars[coolDown] < 0)
							{
								ivars[livesLeft]--;
								bvars[demoMode] = (ivars[livesLeft] < 0);
							}
						}
						else
						{
							spriteFlashToggle[i] = !spriteFlashToggle[i];
							spriteEnabled[i]     =  spriteFlashToggle[i];
						}
					}
					// Not already in crash mode
					else
					{
						// If we are off the shoulder
						spriteStartCrash[i] = 
							(
								(spriteX[i] < SHOULDER_X_LEFT + SHOULDER_WIDTH - (b[spriteI[spriteImg[i]]    ] << 1))
							||	(spriteX[i] > SHOULDER_X_RIGHT)
							);
					}
				}

			} // sprite update loop
			
			//
			// Collision Detection + 
			// Draw the frame to the screen
			//

			bvars[c]   = false;
			bvars[hit] = false;

			for (i = 0, s=0; i < NUM_GAME_SPRITES;)
			{
				if (i == s)
				{
					// Draw the grass - green
					// NOTE: Its shorter to use the 3-color new over the single int new (WTF?)
					gBuffer.setColor(new Color(1, 146, 1)); // green
					gBuffer.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

					// Draw the shoulder - brown
					gBuffer.setColor(new Color(182, 109, 37)); // brown;
					gBuffer.fillRect(SHOULDER_X_LEFT, 0, SHOULDER_RECT_WIDTH, SCREEN_HEIGHT);

					// Draw the road - gray
					gBuffer.setColor(new Color(36, 36, 37)); // gray
					gBuffer.fillRect(ROAD_X, 0, ROAD_WIDTH, SCREEN_HEIGHT);
				}

				j = spriteI[ spriteImg[i] ];

				w = b[j++];
				h = b[j++] + spriteY[i];
	
				for (x = 0; x < w; x++)
				{
					for (y = spriteY[i]; y < h; y++)
					{
						boolean t = false;
						int bite = b[j++] & 0x0f;
	
						if	(
								(bite > 0)
							&&	(y > 0)
							&&	(y < SCREEN_HEIGHT)
							&&	(spriteEnabled[i])
							&&	(!spriteNoCollide[i])
							)
						{
							t =	(
									((buffer.getRGB(            x      + spriteX[i], y) & 1) == 0)
								||	((buffer.getRGB(((w << 1) - x - 1) + spriteX[i], y) & 1) == 0)
								);
						}
	
						// Are we in collision mode and we have a hit?
						if (bvars[c] && t)
						{
							bvars[c]   = false;
							bvars[hit] = true;
							break;
						}
						else
						{
							if (t)
							{
								bvars[c] = true;
								s = i++;
								break;
							}
							else
							{
								if (bite > 0 && y > 0 && y < SCREEN_HEIGHT && spriteEnabled[i])
								{
									int pixel = pal[ bite ];

									if (spriteNoCollide[i])
									{
										pixel |= 1;
									}
	
									buffer.setRGB(            x      + spriteX[i], y, pixel);
									buffer.setRGB(((w << 1) - x - 1) + spriteX[i], y, pixel);
								}
							}
						}
					}

					if ((bvars[c] && i > s) || bvars[hit])
					{
						break;
					}
				}

				//
				// Collision Handling
				//
				if (bvars[hit])
				{
//					System.out.println("ixvel="+spriteXVel[i] + ", sxvel="+spriteXVel[s]);

					// NOTE: These values MUST be cached because they
					// might change during the course of the update
					xDiff = spriteX[s]    - spriteX[i];
					yDiff = spriteY[s]    - spriteY[i];
					h     = spriteXVel[s] - spriteXVel[i]; // xVelDiff
					w     = spriteYVel[s] - spriteYVel[i]; // yVelDiff

					// Hero
					// NPC
					// Bullet
					// tree
					// icon
					// blades

					for(x = 0; x < 2; x++)
					{
						// Bullet or Blade
						if	(i >= BULLET_INDEX)
						{
							// Turn off the bullet/blade
							spriteEnabled[i] = false;
							spriteBState1[i] = false;
						}
						else
						{
							// Implicit detection for NPC/Bullet collision,
							// As only NPC can hit a bullet
							if	(
									(spriteImg[s] == SL_INDEX_BULLET)
								||	(
										(
//											(spriteImg[s] == SL_INDEX_BLADE1)
//										||	(spriteImg[s] == SL_INDEX_BLADE2)
											s >= BLADES_INDEX
										)
									&&	(s != ((i - NPC_INDEX) << 1) + BLADES_INDEX)
									&&	(s != ((i - NPC_INDEX) << 1) + BLADES_INDEX + 1)
									)
								)
							{
								// Only NPC could have hit a bullet,
								// But ignore Road Lord hits
								if	(
										(spriteImg[i] != SL_INDEX_ROAD_LORD)
									&&	(
											(spriteImg[i] != SL_INDEX_HERO)
										||	(spriteImg[s] != SL_INDEX_BULLET)
										)
									)
								{
									spriteNoCollide[i]  = true;
									spriteStartCrash[i] = true;
								}
							}
							else
							{
								// Was the collision too fast?
								if	(
										(w > 20 || w < -20)
									||	(spriteImg[i] == SL_INDEX_BIKE && spriteImg[s] == SL_INDEX_HERO)
									)
								{
									spriteNoCollide[i]  = true;
									spriteStartCrash[i] = true;
								}
								else
								{
									spriteXVel[i] += h;// + r.nextInt(7)-3;

									// I am at the top of the collision
									if (yDiff >= 0)
									{
										spriteY[i] -= b[spriteI[spriteImg[i]] + 1] >> 1;
									}
									// I am at the bottom of the collision
									else
									{
										spriteY[i] += b[spriteI[spriteImg[i]] + 1] >> 1;
									}

									// I am at the left of the collision
									if (xDiff >= 0)
									{
										spriteX[i] -= b[spriteI[spriteImg[i]]    ];
									}
									// I am at the right of the collision
									else
									{
										spriteX[i] += b[spriteI[spriteImg[i]]    ];
									}
								}

								// Hero
								if (spriteImg[i] == SL_INDEX_HERO)
								{
									maxYVel = HERO_LOW_VEL;
									spriteYVel[i] += w;
								}

								// Update blade position too
								if (spriteImg[i] == SL_INDEX_SWITCH_BLADE)
								{
									spriteX[BLADES_INDEX + ((i - NPC_INDEX) << 1)    ] = spriteX[i] - 9;
									spriteX[BLADES_INDEX + ((i - NPC_INDEX) << 1) + 1] = spriteX[i] - 9;
									spriteY[BLADES_INDEX + ((i - NPC_INDEX) << 1)    ] = spriteY[i] + 6;
									spriteY[BLADES_INDEX + ((i - NPC_INDEX) << 1) + 1] = spriteY[i] + 24;
								}
							}
						}
	
						// Swap for next iteration
						j = i;
						i = s;
						s = j;

						xDiff = -xDiff;
						yDiff = -yDiff;
						h = -h;
						w = -w;
					}
	
					i = -1;
					s = 0;
					bvars[c]   = false;
					bvars[hit] = false;
				}
	
				if (bvars[c])
				{
					i--;
				}
				else
				{
					i++;
				}
			}

			//
			// Update Score
			//

			String drawString;
			if (ivars[noPointsFramesLeft] > 0)
			{
				ivars[noPointsFramesLeft]--;
				drawString = "NO POINTS";
			}
			else
			{
				if (!bvars[rumbleEnabled] && !bvars[demoMode])
				{
					ivars[score] += (spriteYVel[HERO_INDEX] / HERO_LOW_VEL ) * 5;

					if (ivars[score] >= (ivars[livesGiven] + 1) * 10000)
					{
						ivars[livesGiven]++;

						if (ivars[livesLeft] < MAX_LIVES)
						{
							ivars[livesLeft]++;
						}
					}

					if (ivars[score] > ivars[hiscore])
					{
						ivars[hiscore] = ivars[score];
					}
				}

				drawString = String.valueOf(ivars[score]);   
			}

			gBuffer.setColor(new Color(255,255,255));
			gBuffer.drawString(drawString, STATUS_SCORE_X, STATUS_SCORE_Y);

			//
			// Update cooldown
			//
	
			if (!bvars[demoMode])
			{
				if (ivars[coolDown] >= 0)
				{
					gBuffer.drawString(String.valueOf(ivars[coolDown]), STATUS_COOL_DOWN_X, STATUS_COOL_DOWN_Y);

					if (bvars[coolDownCarry])
					{
						ivars[coolDown]--;
					}

					bvars[coolDownCarry] = !bvars[coolDownCarry];
				}
			}
			else
			{
				gBuffer.drawString(String.valueOf(ivars[hiscore]), STATUS_COOL_DOWN_X-15, STATUS_COOL_DOWN_Y);
				spriteYVel[HERO_INDEX] = HERO_LOW_VEL;
				if (bvars[showGameOver])
				{
					gBuffer.drawString("GAME OVER", (SCREEN_WIDTH / 2) - 40, (SCREEN_HEIGHT / 2) - 20);
				}

				gBuffer.drawString("ENTER TO PLAY", (SCREEN_WIDTH / 2) - 50, (SCREEN_HEIGHT / 2));
			}

	
			//
			// Update Grace
			//
			if (ivars[grace] >= 0)
			{
				ivars[grace]--;
			}

			//
			// Sleep
			//
			final long frameSleep = FRAME_SLEEP + frameStart - System.currentTimeMillis();
			if (frameSleep > 0)
			{
				Thread.sleep(frameSleep);
			}

			gPanel.drawImage(buffer, 0, 0, null);
			gPanel.dispose();
			gBuffer.dispose();
		}
	}

	protected final void processKeyEvent(KeyEvent e)
	{
//		final String kcs = "\45\47\46\33\21\n";
		final String kcs = "\45\47\46\21\n\33";
		setDefaultCloseOperation[kcs.indexOf(e.getKeyCode()) + 1] = e.getID() == 401;
	}
}
